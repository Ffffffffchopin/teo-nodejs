/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class Namespace {
  definePipelineItem(name: string, body: (value: any, args?: {[key: string]: any}, object?: any, ctx?: any) => any | Promise<any>): void
  defineHandler(name: string, callback: (...args: any[]) => any): void
}
export class ObjectId { }
export class DateOnly { }
export class Range { }
export class File { }
export class EnumVariant { }
export class OptionVariant { }
export class Pipeline { }
export class InterfaceEnumVariant { }
export class App {
  /** Create a Teo app. */
  constructor()
  /** @internal */
  static withCli(cli: boolean): App
  /** Run this app. */
  run(): Promise<void>
  mainNamespace(): Namespace
  /** Run before server is started. */
  setup(callback: (ctx: any) => void | Promise<void>): void
  /** Define a custom program. */
  program(name: string, callback: (ctx: any) => void | Promise<void>): void
}
export class ReadOnlyHeaderMap {
  keys(): Array<string>
  len(): number
  containsKey(key: string): boolean
  get(key: string): string | null
}
export class Request {
  method(): string
  path(): string
  queryString(): string
  contentType(): string
  headers(): ReadOnlyHeaderMap
}
export class ReadWriteHeaderMap {
  keys(): Array<string>
  len(): number
  containsKey(key: string): boolean
  get(key: string): string | null
  set(key: string, value: string): void
}
export class Response {
  static empty(): Response
  static string(content: string, contentType: string): Response
  static json(value: unknown): this
  static html(content: string): Response
  static data(value: unknown): this
  static dataMeta(data: unknown, meta: unknown): this
  static redirect(path: string): Response
  setCode(code: number): void
  code(): number
  headers(): ReadWriteHeaderMap
}
